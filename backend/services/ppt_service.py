from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor
from pptx.enum.text import PP_ALIGN
import os
import logging

logger = logging.getLogger(__name__)

class PPTService:
    def __init__(self):
        self.presentation = None
    
    def create_presentation(self, content_data: dict) -> bool:
        """Create PowerPoint presentation from content data"""
        try:
            self.presentation = Presentation()
            
            self._create_title_slide(content_data.get('title', 'Untitled Presentation'))
            
            slides_data = content_data.get('slides', [])
            for slide_data in slides_data:
                if slide_data.get('slide_type') == 'title':
                    continue 
                self._create_content_slide(slide_data)
            
            logger.info(f"Created presentation with {len(self.presentation.slides)} slides")
            return True
            
        except Exception as e:
            logger.error(f"Error creating presentation: {e}")
            return False
    
    def _create_title_slide(self, title: str):
        """Create title slide"""
        title_slide_layout = self.presentation.slide_layouts[0]
        slide = self.presentation.slides.add_slide(title_slide_layout)
        
        title_shape = slide.shapes.title
        subtitle_shape = slide.placeholders[1]
        
        title_shape.text = title
        subtitle_shape.text = "Generated by AI"
        
        # Style the title
        title_shape.text_frame.paragraphs[0].font.size = Pt(44)
        title_shape.text_frame.paragraphs[0].font.bold = True
    
    def _create_content_slide(self, slide_data: dict):
        """Create content slide with bullet points"""
        bullet_slide_layout = self.presentation.slide_layouts[1]
        slide = self.presentation.slides.add_slide(bullet_slide_layout)
        
        slide.shapes.title.text = slide_data.get('title', 'Untitled Slide')
        
        content_placeholder = slide.placeholders[1]
        text_frame = content_placeholder.text_frame
        text_frame.clear()
        
        content_list = slide_data.get('content', [])
        if content_list:
            for i, point in enumerate(content_list):
                if i == 0:
                    # First paragraph
                    p = text_frame.paragraphs[0]
                else:
                    # Add new paragraph
                    p = text_frame.add_paragraph()
                
                p.text = point
                p.level = 0
                p.font.size = Pt(18)
    
    def save_presentation(self, filename: str) -> str:
        """Save presentation to file"""
        if not self.presentation:
            raise ValueError("No presentation to save")
        
        from config import Config
        
        os.makedirs(Config.GENERATED_FILES_DIR, exist_ok=True)
        
        filepath = os.path.join(Config.GENERATED_FILES_DIR, filename)
        self.presentation.save(filepath)
        
        logger.info(f"Presentation saved to: {filepath}")
        return filepath